// Generated automatically by nearley
// http://github.com/Hardmath123/nearley
(function () {
function id(x) {return x[0]; }

  function sel(match, indices) {
    return match.map(function(m) {
      var arr = [];
        indices.forEach(function(i) {
          arr.push(m[i]);
        });
        return arr;
    });
  }
var grammar = {
    ParserRules: [
    {"name": "Stylesheet$ebnf$1", "symbols": []},
    {"name": "Stylesheet$ebnf$1", "symbols": ["Root", "Stylesheet$ebnf$1"], "postprocess": function arrconcat(d) {return [d[0]].concat(d[1]);}},
    {"name": "Stylesheet", "symbols": ["_", "Stylesheet$ebnf$1", "_"]},
    {"name": "Root", "symbols": ["_", "Comment", "_"]},
    {"name": "Root", "symbols": ["_", "Ruleset", "_"]},
    {"name": "Root", "symbols": ["_", "MixinDefinition", "_"]},
    {"name": "Root$ebnf$1$subexpression$1$ebnf$1$subexpression$1", "symbols": ["_", "Root", "_"]},
    {"name": "Root$ebnf$1$subexpression$1$ebnf$1", "symbols": ["Root$ebnf$1$subexpression$1$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "Root$ebnf$1$subexpression$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "Root$ebnf$1$subexpression$1", "symbols": [{"literal":";"}, "Root$ebnf$1$subexpression$1$ebnf$1"]},
    {"name": "Root$ebnf$1", "symbols": ["Root$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "Root$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "Root", "symbols": ["_", "VariableDefinition", "_", "Root$ebnf$1"]},
    {"name": "Root$ebnf$2$subexpression$1$ebnf$1$subexpression$1", "symbols": ["_", "Root", "_"]},
    {"name": "Root$ebnf$2$subexpression$1$ebnf$1", "symbols": ["Root$ebnf$2$subexpression$1$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "Root$ebnf$2$subexpression$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "Root$ebnf$2$subexpression$1", "symbols": [{"literal":";"}, "Root$ebnf$2$subexpression$1$ebnf$1"]},
    {"name": "Root$ebnf$2", "symbols": ["Root$ebnf$2$subexpression$1"], "postprocess": id},
    {"name": "Root$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "Root", "symbols": ["_", "AtRule", "_", "Root$ebnf$2"]},
    {"name": "Root$ebnf$3$subexpression$1$ebnf$1$subexpression$1", "symbols": ["_", "Root", "_"]},
    {"name": "Root$ebnf$3$subexpression$1$ebnf$1", "symbols": ["Root$ebnf$3$subexpression$1$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "Root$ebnf$3$subexpression$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "Root$ebnf$3$subexpression$1", "symbols": [{"literal":";"}, "Root$ebnf$3$subexpression$1$ebnf$1"]},
    {"name": "Root$ebnf$3", "symbols": ["Root$ebnf$3$subexpression$1"], "postprocess": id},
    {"name": "Root$ebnf$3", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "Root", "symbols": ["_", "MixinCall", "_", "Root$ebnf$3"]},
    {"name": "Primary$ebnf$1$subexpression$1$ebnf$1$subexpression$1", "symbols": ["_", "Primary", "_"]},
    {"name": "Primary$ebnf$1$subexpression$1$ebnf$1", "symbols": ["Primary$ebnf$1$subexpression$1$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "Primary$ebnf$1$subexpression$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "Primary$ebnf$1$subexpression$1", "symbols": [{"literal":";"}, "Primary$ebnf$1$subexpression$1$ebnf$1"]},
    {"name": "Primary$ebnf$1", "symbols": ["Primary$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "Primary$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "Primary", "symbols": ["_", "Rule", "_", "Primary$ebnf$1"]},
    {"name": "Primary", "symbols": ["_", "Root", "_"]},
    {"name": "AtRule$ebnf$1", "symbols": []},
    {"name": "AtRule$ebnf$1", "symbols": [/[^{;]/, "AtRule$ebnf$1"], "postprocess": function arrconcat(d) {return [d[0]].concat(d[1]);}},
    {"name": "AtRule$ebnf$2", "symbols": ["Block"], "postprocess": id},
    {"name": "AtRule$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "AtRule", "symbols": [{"literal":"@"}, "Ident", "_", "AtRule$ebnf$1", "_", "AtRule$ebnf$2"]},
    {"name": "Rule", "symbols": ["Declaration"]},
    {"name": "Rule", "symbols": ["MixinCall"]},
    {"name": "Rule", "symbols": ["VariableDefinition"]},
    {"name": "Rule", "symbols": ["AtRule"]},
    {"name": "Ruleset$ebnf$1", "symbols": ["Comment"], "postprocess": id},
    {"name": "Ruleset$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "Ruleset", "symbols": ["Ruleset$ebnf$1", "_", "SelectorList", "_", "Block"]},
    {"name": "Block$ebnf$1", "symbols": []},
    {"name": "Block$ebnf$1", "symbols": ["Primary", "Block$ebnf$1"], "postprocess": function arrconcat(d) {return [d[0]].concat(d[1]);}},
    {"name": "Block", "symbols": [{"literal":"{"}, "_", "Block$ebnf$1", "_", {"literal":"}"}]},
    {"name": "SelectorList$ebnf$1", "symbols": []},
    {"name": "SelectorList$ebnf$1", "symbols": ["Selector", "SelectorList$ebnf$1"], "postprocess": function arrconcat(d) {return [d[0]].concat(d[1]);}},
    {"name": "SelectorList$ebnf$2", "symbols": []},
    {"name": "SelectorList$ebnf$2$subexpression$1$ebnf$1", "symbols": []},
    {"name": "SelectorList$ebnf$2$subexpression$1$ebnf$1", "symbols": ["Selector", "SelectorList$ebnf$2$subexpression$1$ebnf$1"], "postprocess": function arrconcat(d) {return [d[0]].concat(d[1]);}},
    {"name": "SelectorList$ebnf$2$subexpression$1", "symbols": ["_", {"literal":","}, "_", "SelectorList$ebnf$2$subexpression$1$ebnf$1"]},
    {"name": "SelectorList$ebnf$2", "symbols": ["SelectorList$ebnf$2$subexpression$1", "SelectorList$ebnf$2"], "postprocess": function arrconcat(d) {return [d[0]].concat(d[1]);}},
    {"name": "SelectorList$ebnf$3", "symbols": ["Guard"], "postprocess": id},
    {"name": "SelectorList$ebnf$3", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "SelectorList", "symbols": ["SelectorList$ebnf$1", "SelectorList$ebnf$2", "SelectorList$ebnf$3"]},
    {"name": "MixinDefinition$ebnf$1", "symbols": ["Args"], "postprocess": id},
    {"name": "MixinDefinition$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "MixinDefinition", "symbols": ["ClassOrId", "_", {"literal":"("}, "MixinDefinition$ebnf$1", {"literal":")"}, "_", "Block"]},
    {"name": "Selector$ebnf$1", "symbols": ["Element"], "postprocess": id},
    {"name": "Selector$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "Selector$ebnf$2", "symbols": ["Comment"], "postprocess": id},
    {"name": "Selector$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "Selector$subexpression$1", "symbols": ["Combinator", "_", "Selector", "_"]},
    {"name": "Selector", "symbols": ["Selector$ebnf$1", "_", "Selector$ebnf$2", "_", "Selector$subexpression$1"]},
    {"name": "Selector", "symbols": ["Element", "__", "Selector"]},
    {"name": "Selector$ebnf$3", "symbols": ["Comment"], "postprocess": id},
    {"name": "Selector$ebnf$3", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "Selector", "symbols": ["Element", "_", "Selector$ebnf$3"]},
    {"name": "Class", "symbols": [{"literal":"."}, "Ident"]},
    {"name": "Id", "symbols": [{"literal":"#"}, "Ident"]},
    {"name": "Element", "symbols": ["Class"]},
    {"name": "Element", "symbols": ["Id"]},
    {"name": "Element", "symbols": ["Ident"]},
    {"name": "Element", "symbols": ["Attr"]},
    {"name": "Element", "symbols": [{"literal":"&"}]},
    {"name": "Element", "symbols": ["Pseudo"]},
    {"name": "Element", "symbols": [{"literal":"*"}]},
    {"name": "Combinator", "symbols": [{"literal":">"}]},
    {"name": "Combinator", "symbols": [{"literal":"+"}]},
    {"name": "Combinator", "symbols": [{"literal":"~"}]},
    {"name": "Combinator", "symbols": [{"literal":"|"}]},
    {"name": "Combinator", "symbols": [{"literal":"/"}, "Ident", {"literal":"/"}]},
    {"name": "Combinator$string$1", "symbols": [{"literal":">"}, {"literal":">"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Combinator", "symbols": ["Combinator$string$1"]},
    {"name": "Combinator$string$2", "symbols": [{"literal":"|"}, {"literal":"|"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Combinator", "symbols": ["Combinator$string$2"]},
    {"name": "Combinator$string$3", "symbols": [{"literal":">"}, {"literal":">"}, {"literal":">"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Combinator", "symbols": ["Combinator$string$3"]},
    {"name": "Attr$ebnf$1$subexpression$1$ebnf$1", "symbols": [/[|~*$^]/], "postprocess": id},
    {"name": "Attr$ebnf$1$subexpression$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "Attr$ebnf$1$subexpression$1$subexpression$1", "symbols": ["Quoted"]},
    {"name": "Attr$ebnf$1$subexpression$1$subexpression$1$ebnf$1", "symbols": [/[^\]]/]},
    {"name": "Attr$ebnf$1$subexpression$1$subexpression$1$ebnf$1", "symbols": [/[^\]]/, "Attr$ebnf$1$subexpression$1$subexpression$1$ebnf$1"], "postprocess": function arrconcat(d) {return [d[0]].concat(d[1]);}},
    {"name": "Attr$ebnf$1$subexpression$1$subexpression$1", "symbols": ["Attr$ebnf$1$subexpression$1$subexpression$1$ebnf$1"]},
    {"name": "Attr$ebnf$1$subexpression$1", "symbols": ["Attr$ebnf$1$subexpression$1$ebnf$1", {"literal":"="}, "Attr$ebnf$1$subexpression$1$subexpression$1"]},
    {"name": "Attr$ebnf$1", "symbols": ["Attr$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "Attr$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "Attr$ebnf$2$subexpression$1", "symbols": ["_", {"literal":"i"}]},
    {"name": "Attr$ebnf$2", "symbols": ["Attr$ebnf$2$subexpression$1"], "postprocess": id},
    {"name": "Attr$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "Attr", "symbols": [{"literal":"["}, "Ident", "Attr$ebnf$1", "Attr$ebnf$2", {"literal":"]"}]},
    {"name": "Pseudo$ebnf$1", "symbols": [{"literal":":"}], "postprocess": id},
    {"name": "Pseudo$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "Pseudo$ebnf$2$subexpression$1$ebnf$1", "symbols": []},
    {"name": "Pseudo$ebnf$2$subexpression$1$ebnf$1", "symbols": [/[^)]/, "Pseudo$ebnf$2$subexpression$1$ebnf$1"], "postprocess": function arrconcat(d) {return [d[0]].concat(d[1]);}},
    {"name": "Pseudo$ebnf$2$subexpression$1", "symbols": [{"literal":"("}, "Pseudo$ebnf$2$subexpression$1$ebnf$1", {"literal":")"}]},
    {"name": "Pseudo$ebnf$2", "symbols": ["Pseudo$ebnf$2$subexpression$1"], "postprocess": id},
    {"name": "Pseudo$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "Pseudo", "symbols": [{"literal":":"}, "Pseudo$ebnf$1", "Ident", "Pseudo$ebnf$2"]},
    {"name": "Extend$string$1", "symbols": [{"literal":":"}, {"literal":"e"}, {"literal":"x"}, {"literal":"t"}, {"literal":"e"}, {"literal":"n"}, {"literal":"d"}, {"literal":"("}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Extend$ebnf$1$subexpression$1", "symbols": ["__", "ExtendKeys"]},
    {"name": "Extend$ebnf$1", "symbols": ["Extend$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "Extend$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "Extend", "symbols": ["Extend$string$1", "_", "SelectorList", "Extend$ebnf$1", {"literal":")"}]},
    {"name": "ExtendKeys$ebnf$1", "symbols": [{"literal":"!"}], "postprocess": id},
    {"name": "ExtendKeys$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "ExtendKeys$subexpression$1$string$1", "symbols": [{"literal":"a"}, {"literal":"l"}, {"literal":"l"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "ExtendKeys$subexpression$1", "symbols": ["ExtendKeys$subexpression$1$string$1"]},
    {"name": "ExtendKeys$subexpression$1$string$2", "symbols": [{"literal":"d"}, {"literal":"e"}, {"literal":"e"}, {"literal":"p"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "ExtendKeys$subexpression$1", "symbols": ["ExtendKeys$subexpression$1$string$2"]},
    {"name": "ExtendKeys$subexpression$1$string$3", "symbols": [{"literal":"A"}, {"literal":"L"}, {"literal":"L"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "ExtendKeys$subexpression$1", "symbols": ["ExtendKeys$subexpression$1$string$3"]},
    {"name": "ExtendKeys$subexpression$1$string$4", "symbols": [{"literal":"D"}, {"literal":"E"}, {"literal":"E"}, {"literal":"P"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "ExtendKeys$subexpression$1", "symbols": ["ExtendKeys$subexpression$1$string$4"]},
    {"name": "ExtendKeys", "symbols": ["ExtendKeys$ebnf$1", "ExtendKeys$subexpression$1"]},
    {"name": "ClassOrId", "symbols": ["Class"]},
    {"name": "ClassOrId", "symbols": ["Id"]},
    {"name": "MixinName", "symbols": ["ClassOrId"]},
    {"name": "Declaration", "symbols": ["Ident", "_", {"literal":":"}, "_", "Value"]},
    {"name": "VariableDefinition", "symbols": ["Variable", "_", {"literal":":"}, "_", "Block"]},
    {"name": "VariableDefinition", "symbols": ["Variable", "_", {"literal":":"}, "_", "Value"]},
    {"name": "Value$ebnf$1", "symbols": []},
    {"name": "Value$ebnf$1$subexpression$1$ebnf$1", "symbols": [{"literal":","}], "postprocess": id},
    {"name": "Value$ebnf$1$subexpression$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "Value$ebnf$1$subexpression$1", "symbols": ["_", "Value$ebnf$1$subexpression$1$ebnf$1", "_", "Entity"]},
    {"name": "Value$ebnf$1", "symbols": ["Value$ebnf$1$subexpression$1", "Value$ebnf$1"], "postprocess": function arrconcat(d) {return [d[0]].concat(d[1]);}},
    {"name": "Value$ebnf$2$subexpression$1$string$1", "symbols": [{"literal":"i"}, {"literal":"m"}, {"literal":"p"}, {"literal":"o"}, {"literal":"r"}, {"literal":"t"}, {"literal":"a"}, {"literal":"n"}, {"literal":"t"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Value$ebnf$2$subexpression$1", "symbols": [{"literal":"!"}, "_", "Value$ebnf$2$subexpression$1$string$1"]},
    {"name": "Value$ebnf$2", "symbols": ["Value$ebnf$2$subexpression$1"], "postprocess": id},
    {"name": "Value$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "Value", "symbols": ["Entity", "Value$ebnf$1", "_", "Value$ebnf$2"]},
    {"name": "NonCommaValue$ebnf$1", "symbols": []},
    {"name": "NonCommaValue$ebnf$1$subexpression$1", "symbols": ["_", "Entity"]},
    {"name": "NonCommaValue$ebnf$1", "symbols": ["NonCommaValue$ebnf$1$subexpression$1", "NonCommaValue$ebnf$1"], "postprocess": function arrconcat(d) {return [d[0]].concat(d[1]);}},
    {"name": "NonCommaValue$ebnf$2$subexpression$1$string$1", "symbols": [{"literal":"i"}, {"literal":"m"}, {"literal":"p"}, {"literal":"o"}, {"literal":"r"}, {"literal":"t"}, {"literal":"a"}, {"literal":"n"}, {"literal":"t"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "NonCommaValue$ebnf$2$subexpression$1", "symbols": [{"literal":"!"}, "_", "NonCommaValue$ebnf$2$subexpression$1$string$1"]},
    {"name": "NonCommaValue$ebnf$2", "symbols": ["NonCommaValue$ebnf$2$subexpression$1"], "postprocess": id},
    {"name": "NonCommaValue$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "NonCommaValue", "symbols": ["Entity", "NonCommaValue$ebnf$1", "_", "NonCommaValue$ebnf$2"]},
    {"name": "Entity", "symbols": ["Expression"]},
    {"name": "Entity", "symbols": ["Comment"]},
    {"name": "Entity", "symbols": ["Literal"]},
    {"name": "Entity", "symbols": ["Url"]},
    {"name": "Entity", "symbols": ["Keyword"]},
    {"name": "Entity", "symbols": [{"literal":"/"}]},
    {"name": "Entity", "symbols": ["Javascript"]},
    {"name": "Literal", "symbols": ["Quoted"]},
    {"name": "Literal", "symbols": ["UnicodeDescriptor"]},
    {"name": "ExpressionParts", "symbols": ["Unit"]},
    {"name": "ExpressionParts", "symbols": ["FunctionCall"]},
    {"name": "ExpressionParts", "symbols": ["Color"]},
    {"name": "ExpressionParts", "symbols": ["Variable"]},
    {"name": "ExpressionParts", "symbols": ["PropReference"]},
    {"name": "Quoted$ebnf$1", "symbols": []},
    {"name": "Quoted$ebnf$1$subexpression$1", "symbols": [/[^\"\n\r]/]},
    {"name": "Quoted$ebnf$1$subexpression$1$string$1", "symbols": [{"literal":"\\"}, {"literal":"\""}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Quoted$ebnf$1$subexpression$1", "symbols": ["Quoted$ebnf$1$subexpression$1$string$1"]},
    {"name": "Quoted$ebnf$1", "symbols": ["Quoted$ebnf$1$subexpression$1", "Quoted$ebnf$1"], "postprocess": function arrconcat(d) {return [d[0]].concat(d[1]);}},
    {"name": "Quoted", "symbols": [{"literal":"\""}, "Quoted$ebnf$1", {"literal":"\""}]},
    {"name": "Quoted$ebnf$2", "symbols": []},
    {"name": "Quoted$ebnf$2$subexpression$1", "symbols": [/[^\'\n\r]/]},
    {"name": "Quoted$ebnf$2$subexpression$1$string$1", "symbols": [{"literal":"\\"}, {"literal":"'"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Quoted$ebnf$2$subexpression$1", "symbols": ["Quoted$ebnf$2$subexpression$1$string$1"]},
    {"name": "Quoted$ebnf$2", "symbols": ["Quoted$ebnf$2$subexpression$1", "Quoted$ebnf$2"], "postprocess": function arrconcat(d) {return [d[0]].concat(d[1]);}},
    {"name": "Quoted", "symbols": [{"literal":"'"}, "Quoted$ebnf$2", {"literal":"'"}]},
    {"name": "Num$ebnf$1$subexpression$1$ebnf$1", "symbols": ["Int"], "postprocess": id},
    {"name": "Num$ebnf$1$subexpression$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "Num$ebnf$1$subexpression$1", "symbols": ["Num$ebnf$1$subexpression$1$ebnf$1", {"literal":"."}]},
    {"name": "Num$ebnf$1", "symbols": ["Num$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "Num$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "Num", "symbols": ["Num$ebnf$1", "Int"]},
    {"name": "Percentage", "symbols": ["Num", {"literal":"%"}]},
    {"name": "Dimension", "symbols": ["Num", "Ident"]},
    {"name": "Unit$ebnf$1$subexpression$1", "symbols": [{"literal":"%"}]},
    {"name": "Unit$ebnf$1$subexpression$1", "symbols": ["Ident"]},
    {"name": "Unit$ebnf$1", "symbols": ["Unit$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "Unit$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "Unit", "symbols": ["Num", "Unit$ebnf$1"]},
    {"name": "Keyword$ebnf$1", "symbols": []},
    {"name": "Keyword$ebnf$1", "symbols": [/[A-Za-z0-9_-]/, "Keyword$ebnf$1"], "postprocess": function arrconcat(d) {return [d[0]].concat(d[1]);}},
    {"name": "Keyword", "symbols": [/[_A-Za-z-]/, "Keyword$ebnf$1"]},
    {"name": "ExpressionContainer", "symbols": [{"literal":"("}, "_", "Expression", "_", {"literal":")"}]},
    {"name": "Expression$ebnf$1$subexpression$1", "symbols": ["_", "Operator", "_", "Expression"]},
    {"name": "Expression$ebnf$1", "symbols": ["Expression$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "Expression$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "Expression", "symbols": ["ExpressionContainer", "Expression$ebnf$1"]},
    {"name": "Expression$ebnf$2$subexpression$1", "symbols": ["_", "Operator", "_", "Expression"]},
    {"name": "Expression$ebnf$2", "symbols": ["Expression$ebnf$2$subexpression$1"], "postprocess": id},
    {"name": "Expression$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "Expression", "symbols": ["ExpressionParts", "Expression$ebnf$2"]},
    {"name": "FunctionCall$subexpression$1", "symbols": ["Ident"]},
    {"name": "FunctionCall$subexpression$1", "symbols": [{"literal":"%"}]},
    {"name": "FunctionCall", "symbols": ["FunctionCall$subexpression$1", {"literal":"("}, "Args", {"literal":")"}]},
    {"name": "FunctionCall$string$1", "symbols": [{"literal":"p"}, {"literal":"r"}, {"literal":"o"}, {"literal":"g"}, {"literal":"i"}, {"literal":"d"}, {"literal":":"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "FunctionCall$ebnf$1", "symbols": []},
    {"name": "FunctionCall$ebnf$1", "symbols": [/[^(]/, "FunctionCall$ebnf$1"], "postprocess": function arrconcat(d) {return [d[0]].concat(d[1]);}},
    {"name": "FunctionCall", "symbols": ["FunctionCall$string$1", "FunctionCall$ebnf$1", {"literal":"("}, "Assignment", {"literal":")"}]},
    {"name": "Assignment", "symbols": ["Keyword", {"literal":"="}, "Value"]},
    {"name": "Url$string$1", "symbols": [{"literal":"u"}, {"literal":"r"}, {"literal":"l"}, {"literal":"("}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Url$subexpression$1", "symbols": ["Quoted"]},
    {"name": "Url$subexpression$1$ebnf$1", "symbols": []},
    {"name": "Url$subexpression$1$ebnf$1", "symbols": [/[^)]/, "Url$subexpression$1$ebnf$1"], "postprocess": function arrconcat(d) {return [d[0]].concat(d[1]);}},
    {"name": "Url$subexpression$1", "symbols": ["Url$subexpression$1$ebnf$1"]},
    {"name": "Url", "symbols": ["Url$string$1", "_", "Url$subexpression$1", "_", {"literal":")"}]},
    {"name": "Prop", "symbols": ["PropReference"]},
    {"name": "Prop", "symbols": ["PropReferenceCurly"]},
    {"name": "Var", "symbols": ["Variable"]},
    {"name": "Var", "symbols": ["VariableCurly"]},
    {"name": "Interpolator", "symbols": ["VariableCurly"]},
    {"name": "Interpolator", "symbols": ["PropReferenceCurly"]},
    {"name": "PropReference", "symbols": [{"literal":"$"}, "Ident"]},
    {"name": "PropReferenceCurly$string$1", "symbols": [{"literal":"$"}, {"literal":"{"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "PropReferenceCurly$ebnf$1", "symbols": ["Namespace"], "postprocess": id},
    {"name": "PropReferenceCurly$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "PropReferenceCurly", "symbols": ["PropReferenceCurly$string$1", "_", "PropReferenceCurly$ebnf$1", "_", "Ident", "_", {"literal":"}"}]},
    {"name": "Variable$ebnf$1", "symbols": [{"literal":"@"}], "postprocess": id},
    {"name": "Variable$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "Variable$ebnf$2", "symbols": [/[A-Za-z0-9_-]/]},
    {"name": "Variable$ebnf$2", "symbols": [/[A-Za-z0-9_-]/, "Variable$ebnf$2"], "postprocess": function arrconcat(d) {return [d[0]].concat(d[1]);}},
    {"name": "Variable", "symbols": [{"literal":"@"}, "Variable$ebnf$1", "Variable$ebnf$2"]},
    {"name": "VariableCurly$string$1", "symbols": [{"literal":"@"}, {"literal":"{"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "VariableCurly$ebnf$1", "symbols": ["Namespace"], "postprocess": id},
    {"name": "VariableCurly$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "VariableCurly$ebnf$2", "symbols": [{"literal":"@"}], "postprocess": id},
    {"name": "VariableCurly$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "VariableCurly$ebnf$3", "symbols": [/[\w-]/]},
    {"name": "VariableCurly$ebnf$3", "symbols": [/[\w-]/, "VariableCurly$ebnf$3"], "postprocess": function arrconcat(d) {return [d[0]].concat(d[1]);}},
    {"name": "VariableCurly", "symbols": ["VariableCurly$string$1", "_", "VariableCurly$ebnf$1", "_", "VariableCurly$ebnf$2", "VariableCurly$ebnf$3", "_", {"literal":"}"}]},
    {"name": "Color$ebnf$1", "symbols": ["Hex3"], "postprocess": id},
    {"name": "Color$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "Color", "symbols": [{"literal":"#"}, "Hex3", "Color$ebnf$1"]},
    {"name": "UnicodeDescriptor$string$1", "symbols": [{"literal":"U"}, {"literal":"+"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "UnicodeDescriptor$ebnf$1", "symbols": [/[0-9a-fA-F?]/]},
    {"name": "UnicodeDescriptor$ebnf$1", "symbols": [/[0-9a-fA-F?]/, "UnicodeDescriptor$ebnf$1"], "postprocess": function arrconcat(d) {return [d[0]].concat(d[1]);}},
    {"name": "UnicodeDescriptor$ebnf$2$subexpression$1$ebnf$1", "symbols": [/[0-9a-fA-F?]/]},
    {"name": "UnicodeDescriptor$ebnf$2$subexpression$1$ebnf$1", "symbols": [/[0-9a-fA-F?]/, "UnicodeDescriptor$ebnf$2$subexpression$1$ebnf$1"], "postprocess": function arrconcat(d) {return [d[0]].concat(d[1]);}},
    {"name": "UnicodeDescriptor$ebnf$2$subexpression$1", "symbols": [{"literal":"-"}, "UnicodeDescriptor$ebnf$2$subexpression$1$ebnf$1"]},
    {"name": "UnicodeDescriptor$ebnf$2", "symbols": ["UnicodeDescriptor$ebnf$2$subexpression$1"], "postprocess": id},
    {"name": "UnicodeDescriptor$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "UnicodeDescriptor", "symbols": ["UnicodeDescriptor$string$1", "UnicodeDescriptor$ebnf$1", "UnicodeDescriptor$ebnf$2"]},
    {"name": "Javascript$ebnf$1", "symbols": [{"literal":"~"}], "postprocess": id},
    {"name": "Javascript$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "Javascript$ebnf$2", "symbols": []},
    {"name": "Javascript$ebnf$2", "symbols": [/[^`]/, "Javascript$ebnf$2"], "postprocess": function arrconcat(d) {return [d[0]].concat(d[1]);}},
    {"name": "Javascript", "symbols": ["Javascript$ebnf$1", {"literal":"`"}, "Javascript$ebnf$2", {"literal":"`"}]},
    {"name": "MixinCall$ebnf$1", "symbols": [{"literal":">"}], "postprocess": id},
    {"name": "MixinCall$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "MixinCall", "symbols": ["ClassOrId", "_", "MixinCall$ebnf$1", "_", "MixinCall"]},
    {"name": "MixinCall$ebnf$2$subexpression$1$ebnf$1", "symbols": ["Args"], "postprocess": id},
    {"name": "MixinCall$ebnf$2$subexpression$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "MixinCall$ebnf$2$subexpression$1", "symbols": [{"literal":"("}, "MixinCall$ebnf$2$subexpression$1$ebnf$1", {"literal":")"}]},
    {"name": "MixinCall$ebnf$2", "symbols": ["MixinCall$ebnf$2$subexpression$1"], "postprocess": id},
    {"name": "MixinCall$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "MixinCall", "symbols": ["MixinName", "MixinCall$ebnf$2"]},
    {"name": "Args$ebnf$1", "symbols": []},
    {"name": "Args$ebnf$1$subexpression$1", "symbols": [{"literal":","}, "_", "CommaArgument"]},
    {"name": "Args$ebnf$1", "symbols": ["Args$ebnf$1$subexpression$1", "Args$ebnf$1"], "postprocess": function arrconcat(d) {return [d[0]].concat(d[1]);}},
    {"name": "Args", "symbols": ["CommaArgument", "_", "Args$ebnf$1"]},
    {"name": "Args$ebnf$2", "symbols": []},
    {"name": "Args$ebnf$2$subexpression$1", "symbols": [{"literal":";"}, "_", "SemiColonArgument", "_"]},
    {"name": "Args$ebnf$2", "symbols": ["Args$ebnf$2$subexpression$1", "Args$ebnf$2"], "postprocess": function arrconcat(d) {return [d[0]].concat(d[1]);}},
    {"name": "Args$ebnf$3", "symbols": [{"literal":";"}], "postprocess": id},
    {"name": "Args$ebnf$3", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "Args", "symbols": ["SemiColonArgument", "_", "Args$ebnf$2", "Args$ebnf$3"]},
    {"name": "CommaArgument$subexpression$1", "symbols": ["_", {"literal":":"}, "_", "NonCommaValue"]},
    {"name": "CommaArgument", "symbols": ["Variable", "CommaArgument$subexpression$1"]},
    {"name": "CommaArgument", "symbols": ["NonCommaValue"]},
    {"name": "CommaArgument$string$1", "symbols": [{"literal":"."}, {"literal":"."}, {"literal":"."}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "CommaArgument", "symbols": ["CommaArgument$string$1"]},
    {"name": "SemiColonArgument", "symbols": ["CommaArgument"]},
    {"name": "SemiColonArgument", "symbols": ["Value"]},
    {"name": "Namespace", "symbols": [{"literal":"5"}]},
    {"name": "Guard", "symbols": [{"literal":"6"}]},
    {"name": "Ident$ebnf$1", "symbols": []},
    {"name": "Ident$ebnf$1", "symbols": ["NameChar", "Ident$ebnf$1"], "postprocess": function arrconcat(d) {return [d[0]].concat(d[1]);}},
    {"name": "Ident", "symbols": ["NameStart", "Ident$ebnf$1"]},
    {"name": "Operator", "symbols": [{"literal":"*"}]},
    {"name": "Operator", "symbols": [{"literal":"+"}]},
    {"name": "Operator", "symbols": [{"literal":"-"}]},
    {"name": "Operator", "symbols": [{"literal":"/"}]},
    {"name": "Int$ebnf$1", "symbols": [/[0-9]/]},
    {"name": "Int$ebnf$1", "symbols": [/[0-9]/, "Int$ebnf$1"], "postprocess": function arrconcat(d) {return [d[0]].concat(d[1]);}},
    {"name": "Int", "symbols": ["Int$ebnf$1"]},
    {"name": "Hex3", "symbols": ["Hex", "Hex", "Hex"]},
    {"name": "Hex", "symbols": [/[a-fA-F0-9]/]},
    {"name": "NameStart", "symbols": [/[a-zA-Z_-]/]},
    {"name": "NameStart", "symbols": ["NonAscii"]},
    {"name": "NameStart", "symbols": ["Escape"]},
    {"name": "NameChar", "symbols": [/[A-Za-z0-9_-]/]},
    {"name": "NameChar", "symbols": ["NonAscii"]},
    {"name": "NameChar", "symbols": ["Escape"]},
    {"name": "NonAscii", "symbols": [/[\u0080-\uD7FF\uE000-\uFFFD]/]},
    {"name": "Escape", "symbols": ["Unicode"]},
    {"name": "Escape", "symbols": [{"literal":"\\"}, /[\u0020-\u007E\u0080-\uD7FF\uE000-\uFFFD]/]},
    {"name": "Unicode$ebnf$1", "symbols": ["Hex"]},
    {"name": "Unicode$ebnf$1", "symbols": ["Hex", "Unicode$ebnf$1"], "postprocess": function arrconcat(d) {return [d[0]].concat(d[1]);}},
    {"name": "Unicode$ebnf$2", "symbols": ["_"], "postprocess": id},
    {"name": "Unicode$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "Unicode", "symbols": [{"literal":"\\"}, "Unicode$ebnf$1", "Unicode$ebnf$2"]},
    {"name": "_$ebnf$1", "symbols": ["__"], "postprocess": id},
    {"name": "_$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "_", "symbols": ["_$ebnf$1"]},
    {"name": "__$ebnf$1", "symbols": [/[ \t\r\n\f]/]},
    {"name": "__$ebnf$1", "symbols": [/[ \t\r\n\f]/, "__$ebnf$1"], "postprocess": function arrconcat(d) {return [d[0]].concat(d[1]);}},
    {"name": "__", "symbols": ["__$ebnf$1"]},
    {"name": "Comment$string$1", "symbols": [{"literal":"/"}, {"literal":"/"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Comment$ebnf$1", "symbols": []},
    {"name": "Comment$ebnf$1", "symbols": [/[^\n\r]/, "Comment$ebnf$1"], "postprocess": function arrconcat(d) {return [d[0]].concat(d[1]);}},
    {"name": "Comment", "symbols": ["Comment$string$1", "Comment$ebnf$1"]},
    {"name": "Comment$string$2", "symbols": [{"literal":"/"}, {"literal":"*"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Comment$ebnf$2", "symbols": []},
    {"name": "Comment$ebnf$2", "symbols": ["CommentChars", "Comment$ebnf$2"], "postprocess": function arrconcat(d) {return [d[0]].concat(d[1]);}},
    {"name": "Comment$string$3", "symbols": [{"literal":"*"}, {"literal":"/"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Comment", "symbols": ["Comment$string$2", "Comment$ebnf$2", "Comment$string$3"]},
    {"name": "CommentChars", "symbols": [{"literal":"*"}, /[^\/]/]},
    {"name": "CommentChars", "symbols": [/[^*]/]}
]
  , ParserStart: "Stylesheet"
}
if (typeof module !== 'undefined'&& typeof module.exports !== 'undefined') {
   module.exports = grammar;
} else {
   window.grammar = grammar;
}
})();
