{
  function sel(match, indices) {
    return match.map(function(m) {
      var arr = [];
        indices.forEach(function(i) {
          arr.push(m[i]);
        });
        return arr;
    });
  }
}
Stylesheet
  = _ a:Root* _ 
    { return a }

Root
  = _ Comment _
   / _ x:Ruleset _
     { return x }
   / _ y:MixinDefinition _
     { return y }
   / _ z:VariableDefinition _ (";" (_ Root _)?)?
     { return z }
   / _ AtRule _ (";" (_ Root _)?)? 
   / _ z:MixinCall _ (";" (_ Root _)?)?
     { return z }
     
Primary
  = _ a:Rule _ (";" (_ Primary _)?)?
     { return a; }
   / _ x:Root _

AtRule
  = "@" Ident _ [^{;]* _ Block?  // need arguments etc
  
// these need semi-colon separators
Rule   
  = Declaration / MixinCall / VariableDefinition / AtRule // | RulesetCall

Ruleset
  = Comment? _ a:SelectorList _ b:Block
    { return { selectors:a, block:b } }

Block
  = "{" _ primary:Primary* _ "}"
    { return primary }
    
SelectorList
  = a:Selector* b:(_ "," _ Selector*)* c:Guard?
    { return [a].concat(sel(b, [3])); }

MixinDefinition
  = a:ClassOrId _ "(" b:Args? ")" _ c:Block
    { return { a:a, c:c, location: location(), text: text() } }

// Elements
Selector "Selector"
  = a:Element? _ Comment? _ b:(Combinator _ Selector _)
    { return [a,b] }
    / a:Element __ b:Selector
    { return [a, [" ", b]] }
    / Element _ Comment? 
   
// Elements
Class 
  = $("." Ident)

Id
  = $("#" Ident)

Element 
  = Class / Id / Ident / Attr / "&" / Pseudo / "*"

Combinator
  = ">" / "+" / "~" / "|" / "/" Ident "/" / ">>" / "||" / ">>>"      // Current CSS4 combinators on the end

Attr
  = "[" Ident ([|~*$^]? "=" (Quoted / [^\]]+))? (_ "i")? "]"

Pseudo
  = ":" ":"? Ident ("(" [^)]* ")")?

Extend
  = ":extend(" _ SelectorList (__ ExtendKeys)? ")"

ExtendKeys
  = "!"? ("all" / "deep" / "ALL" / "DEEP")

ClassOrId
  = Class / Id

MixinName = ClassOrId

Declaration
  = prop:$Ident _ ":" _ val:$Value 
    { return { 
      type: "Declaration", 
      prop: prop, 
      val: val
    } }

VariableDefinition
  = name:Variable _ ":" _ val:Block 
    { return { name: name, val: val  } }
  / name:Variable _ ":" _ val:Value 
    { return { name: name, val: val  } }

Value
  = Entity (_ ","? _ Entity)* _ ("!" _ "important")?

NonCommaValue
  = Entity (_ Entity)* _ ("!" _ "important")?

// ENTITIES
Entity
  = Expression
   / Comment   
   / Literal
   / Url
   / Keyword
   / "/"
   / Javascript

  Literal
    = Quoted
     / UnicodeDescriptor
  
  ExpressionParts
    = Unit
     / FunctionCall
     / Color
     / Variable
     / PropReference
 
  Quoted
    = "\"" ([^\"\n\r] / "\\\"" )* "\""
      / "'" ([^\'\n\r] / "\\'")* "'"

  Num         = (Int? ".")? Int
  Percentage  = Num "%"
  Dimension   = Num Ident
  Unit        = Num ("%" / Ident)?
  Keyword     = $([_A-Za-z-] [A-Za-z0-9_-]*)

  ExpressionContainer
    = "(" _ Expression _ ")"
  Expression
    = ExpressionContainer (_ Operator _ Expression)? / ExpressionParts (_ Operator _ Expression)?
 
    
  FunctionCall
    = (Ident / "%") "(" Args ")" 
     / "progid:" [^(]* "(" Assignment ")"

  Assignment
    = Keyword "=" Value 

  Url
    = "url(" _ (Quoted / [^)]*) _ ")"     // -- need to extract the url

  Prop = PropReference / PropReferenceCurly
  Var  = Variable / VariableCurly
  Interpolator = VariableCurly / PropReferenceCurly

  PropReference
    = "$" Ident

  PropReferenceCurly
    = "${" _ Namespace? _ Ident _ "}"  // -- TODO: namespacing needs to be optional

  Variable
    = $("@" "@"? [A-Za-z0-9_-]+)

  VariableCurly
    = "@{" _ Namespace? _ "@"? [\w-]+ _ "}"

  Color
    = "#" Hex3 Hex3?

  UnicodeDescriptor
    = "U+" [0-9a-fA-F?]+ ("-" [0-9a-fA-F?]+)?

  Javascript
    = "~"? "`" [^`]* "`"

MixinCall
  = ClassOrId _ ">"? _ MixinCall
   / MixinName ("(" Args? ")")?

Args
 = CommaArgument _ ("," _ CommaArgument)*
  / SemiColonArgument _ (";"_ SemiColonArgument _)* ";"?

CommaArgument
  = Variable (_ ":" _ NonCommaValue)
   / NonCommaValue
   / "..."

SemiColonArgument
  = CommaArgument
  / Value

// TEMP
Namespace = "5"
Guard = "6"


Ident
  = b:NameStart c:NameChar*
    { return b + c.join("") }
   //# | ident:? variableCurly ident:?  # not sure how to do this

// Primitives
Operator
  = "*" / "+" / "-" / "/"
Int
  = [0-9]+  
Hex3
  = Hex Hex Hex
Hex
  = [a-fA-F0-9]
NameStart
  = [a-zA-Z_-] / NonAscii / Escape 
NameChar
  = [A-Za-z0-9_-] / NonAscii / Escape 
NonAscii
  = [\u0080-\uD7FF\uE000-\uFFFD]
Escape
  = Unicode / "\\" [\u0020-\u007E\u0080-\uD7FF\uE000-\uFFFD]
Unicode
  = "\\" Hex+ _?


// Whitespace
_  = __?
__ = [ \t\r\n\f]+

Comment
  = "//" [^\n\r]* 
    / "/*" CommentChars* "*/" 
        
CommentChars
  = "*" [^/] 
    / [^*]

